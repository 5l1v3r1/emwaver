
tesla_emwaver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003744  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003874  08003874  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08003874  08003874  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003874  08003874  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800387c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000058  080038d4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080038d4  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006607  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f4  00000000  00000000  00026688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00027b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  00028330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c94  00000000  00000000  00028a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007afe  00000000  00000000  0003f6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e9d  00000000  00000000  000471ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000211c  00000000  00000000  000c90b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000058 	.word	0x20000058
 800012c:	00000000 	.word	0x00000000
 8000130:	0800383c 	.word	0x0800383c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000005c 	.word	0x2000005c
 800014c:	0800383c 	.word	0x0800383c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	3a01      	subs	r2, #1
 8000732:	bf28      	it	cs
 8000734:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000738:	d2ed      	bcs.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_f2uiz>:
 8000c20:	0042      	lsls	r2, r0, #1
 8000c22:	d20e      	bcs.n	8000c42 <__aeabi_f2uiz+0x22>
 8000c24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c28:	d30b      	bcc.n	8000c42 <__aeabi_f2uiz+0x22>
 8000c2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c32:	d409      	bmi.n	8000c48 <__aeabi_f2uiz+0x28>
 8000c34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr
 8000c48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c4c:	d101      	bne.n	8000c52 <__aeabi_f2uiz+0x32>
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	d102      	bne.n	8000c58 <__aeabi_f2uiz+0x38>
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <SpiWriteReg>:
uint8_t PA_TABLE_915[10] = {0x03,0x0E,0x1E,0x27,0x38,0x8E,0x84,0xCC,0xC3,0xC0};  //900 - 928




void SpiWriteReg (uint8_t address, uint8_t value) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	460a      	mov	r2, r1
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_RESET);  // pull the cs pin low
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <SpiWriteReg+0x44>)
 8000c76:	f001 fc49 	bl	800250c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &address, 1, 100);  // write data to register
 8000c7a:	1df9      	adds	r1, r7, #7
 8000c7c:	2364      	movs	r3, #100	; 0x64
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <SpiWriteReg+0x48>)
 8000c82:	f002 f8c7 	bl	8002e14 <HAL_SPI_Transmit>
	HAL_SPI_Transmit (&hspi1, &value, 1, 100);  // write data to register
 8000c86:	1db9      	adds	r1, r7, #6
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <SpiWriteReg+0x48>)
 8000c8e:	f002 f8c1 	bl	8002e14 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);  // pull the cs pin high
 8000c92:	2201      	movs	r2, #1
 8000c94:	2110      	movs	r1, #16
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <SpiWriteReg+0x44>)
 8000c98:	f001 fc38 	bl	800250c <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	20000080 	.word	0x20000080

08000cac <SpiWriteBurstReg>:

void SpiWriteBurstReg(uint8_t addr, uint8_t *buffer, uint8_t num){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	uint8_t i, temp;
	temp = addr | WRITE_BURST;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_RESET);  // pull the cs pin low
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <SpiWriteBurstReg+0x68>)
 8000ccc:	f001 fc1e 	bl	800250c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &temp, 1, 100);
 8000cd0:	f107 010e 	add.w	r1, r7, #14
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	480f      	ldr	r0, [pc, #60]	; (8000d18 <SpiWriteBurstReg+0x6c>)
 8000cda:	f002 f89b 	bl	8002e14 <HAL_SPI_Transmit>
	for (i = 0; i < num; i++){
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e00a      	b.n	8000cfa <SpiWriteBurstReg+0x4e>
	 HAL_SPI_Transmit (&hspi1, &buffer[i], 1, 100);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	18d1      	adds	r1, r2, r3
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	2201      	movs	r2, #1
 8000cee:	480a      	ldr	r0, [pc, #40]	; (8000d18 <SpiWriteBurstReg+0x6c>)
 8000cf0:	f002 f890 	bl	8002e14 <HAL_SPI_Transmit>
	for (i = 0; i < num; i++){
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d3f0      	bcc.n	8000ce4 <SpiWriteBurstReg+0x38>
	}
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2110      	movs	r1, #16
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <SpiWriteBurstReg+0x68>)
 8000d08:	f001 fc00 	bl	800250c <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40010800 	.word	0x40010800
 8000d18:	20000080 	.word	0x20000080

08000d1c <SpiStrobe>:
		HAL_SPI_Receive (&hspi1, &buffer[i], 1, 100);
	}
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);  // pull the pin high
}

void SpiStrobe (uint8_t value) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_RESET);  // pull the cs pin low
 8000d26:	2200      	movs	r2, #0
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <SpiStrobe+0x34>)
 8000d2c:	f001 fbee 	bl	800250c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &value, 1, 100);
 8000d30:	1df9      	adds	r1, r7, #7
 8000d32:	2364      	movs	r3, #100	; 0x64
 8000d34:	2201      	movs	r2, #1
 8000d36:	4807      	ldr	r0, [pc, #28]	; (8000d54 <SpiStrobe+0x38>)
 8000d38:	f002 f86c 	bl	8002e14 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);  // pull the cs pin low
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <SpiStrobe+0x34>)
 8000d42:	f001 fbe3 	bl	800250c <HAL_GPIO_WritePin>

}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010800 	.word	0x40010800
 8000d54:	20000080 	.word	0x20000080

08000d58 <SpiStart>:
*FUNCTION     :spi communication start
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void SpiStart(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  #ifdef ESP32
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
  #else
  SPI.begin();
  #endif*/
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <SpiEnd>:
*FUNCTION     :spi communication disable
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void SpiEnd(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /*// disable SPI
  SPI.endTransaction();
  SPI.end();*/
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <Reset>:
*FUNCTION     :CC1101 reset //details refer datasheet of CC1101/CC1100//
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void Reset (void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	uint8_t temp = CC1101_SRES;
 8000d76:	2330      	movs	r3, #48	; 0x30
 8000d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <Reset+0x54>)
 8000d80:	f001 fbc4 	bl	800250c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f001 f935 	bl	8001ff4 <HAL_Delay>
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <Reset+0x54>)
 8000d90:	f001 fbbc 	bl	800250c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f001 f92d 	bl	8001ff4 <HAL_Delay>
	HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <Reset+0x54>)
 8000da0:	f001 fbb4 	bl	800250c <HAL_GPIO_WritePin>
	//while(digitalRead(MISO_PIN));

  HAL_SPI_Transmit (&hspi1, &temp, 1, 100);
 8000da4:	1df9      	adds	r1, r7, #7
 8000da6:	2364      	movs	r3, #100	; 0x64
 8000da8:	2201      	movs	r2, #1
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <Reset+0x58>)
 8000dac:	f002 f832 	bl	8002e14 <HAL_SPI_Transmit>
 // while(digitalRead(MISO_PIN));
  HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <Reset+0x54>)
 8000db6:	f001 fba9 	bl	800250c <HAL_GPIO_WritePin>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	20000080 	.word	0x20000080

08000dcc <Init>:
*FUNCTION     :CC1101 initialization
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  setSpi();
 8000dd0:	f000 f842 	bl	8000e58 <setSpi>
  SpiStart();                   //spi initialization
 8000dd4:	f7ff ffc0 	bl	8000d58 <SpiStart>
  HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <Init+0x28>)
 8000dde:	f001 fb95 	bl	800250c <HAL_GPIO_WritePin>
  //digitalWrite(SCK_PIN, HIGH);
  //digitalWrite(MOSI_PIN, LOW);
  Reset();                    //CC1101 reset
 8000de2:	f7ff ffc5 	bl	8000d70 <Reset>
  RegConfigSettings();            //CC1101 register config
 8000de6:	f000 fe01 	bl	80019ec <RegConfigSettings>
  SpiEnd();
 8000dea:	f7ff ffbb 	bl	8000d64 <SpiEnd>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010800 	.word	0x40010800

08000df8 <SpiReadStatus>:
*FUNCTION     :CC1101 read status register
*INPUT        :addr: register address
*OUTPUT       :status value
****************************************************************/
uint8_t SpiReadStatus(uint8_t addr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  uint8_t value,temp;
  SpiStart();
 8000e02:	f7ff ffa9 	bl	8000d58 <SpiStart>
  temp = addr | READ_BURST;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	73bb      	strb	r3, [r7, #14]
  HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <SpiReadStatus+0x58>)
 8000e16:	f001 fb79 	bl	800250c <HAL_GPIO_WritePin>
  //while(digitalRead(MISO_PIN));
  HAL_SPI_Transmit (&hspi1, &temp, 1, 100);
 8000e1a:	f107 010e 	add.w	r1, r7, #14
 8000e1e:	2364      	movs	r3, #100	; 0x64
 8000e20:	2201      	movs	r2, #1
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <SpiReadStatus+0x5c>)
 8000e24:	f001 fff6 	bl	8002e14 <HAL_SPI_Transmit>
  HAL_SPI_Receive (&hspi1, &value, 1, 100);
 8000e28:	f107 010f 	add.w	r1, r7, #15
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <SpiReadStatus+0x5c>)
 8000e32:	f002 f92b 	bl	800308c <HAL_SPI_Receive>
  HAL_GPIO_WritePin (GPIOA, NSS_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <SpiReadStatus+0x58>)
 8000e3c:	f001 fb66 	bl	800250c <HAL_GPIO_WritePin>
  SpiEnd();
 8000e40:	f7ff ff90 	bl	8000d64 <SpiEnd>
  return value;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010800 	.word	0x40010800
 8000e54:	20000080 	.word	0x20000080

08000e58 <setSpi>:
*FUNCTION NAME:SPI pin Settings
*FUNCTION     :Set Spi pins
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void setSpi(void){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 /* if (spi == 0){
  SCK_PIN = 13; MISO_PIN = 12; MOSI_PIN = 11; SS_PIN = 10;
}*/
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <setCCMode>:
*FUNCTION NAME:CCMode
*FUNCTION     :Format of RX and TX data
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void setCCMode(uint8_t s){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
ccmode = s;
 8000e6e:	4a20      	ldr	r2, [pc, #128]	; (8000ef0 <setCCMode+0x8c>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	7013      	strb	r3, [r2, #0]
if (ccmode == 1){
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <setCCMode+0x8c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d118      	bne.n	8000eae <setCCMode+0x4a>
SpiWriteReg(CC1101_IOCFG2,      0x0B);
 8000e7c:	210b      	movs	r1, #11
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff feee 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_IOCFG0,      0x06);
 8000e84:	2106      	movs	r1, #6
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff feea 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_PKTCTRL0,    0x05);
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	2008      	movs	r0, #8
 8000e90:	f7ff fee6 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_MDMCFG3,     0xF8);
 8000e94:	21f8      	movs	r1, #248	; 0xf8
 8000e96:	2011      	movs	r0, #17
 8000e98:	f7ff fee2 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_MDMCFG4,11+m4RxBw);
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <setCCMode+0x90>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	330b      	adds	r3, #11
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2010      	movs	r0, #16
 8000ea8:	f7ff feda 	bl	8000c60 <SpiWriteReg>
 8000eac:	e017      	b.n	8000ede <setCCMode+0x7a>
}else{
SpiWriteReg(CC1101_IOCFG2,      0x0D);
 8000eae:	210d      	movs	r1, #13
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fed5 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_IOCFG0,      0x0D);
 8000eb6:	210d      	movs	r1, #13
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f7ff fed1 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_PKTCTRL0,    0x32);
 8000ebe:	2132      	movs	r1, #50	; 0x32
 8000ec0:	2008      	movs	r0, #8
 8000ec2:	f7ff fecd 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_MDMCFG3,     0x93);
 8000ec6:	2193      	movs	r1, #147	; 0x93
 8000ec8:	2011      	movs	r0, #17
 8000eca:	f7ff fec9 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_MDMCFG4, 7+m4RxBw);
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <setCCMode+0x90>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff fec1 	bl	8000c60 <SpiWriteReg>
}
setModulation(modulation);
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <setCCMode+0x94>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f80a 	bl	8000efc <setModulation>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000077 	.word	0x20000077
 8000ef4:	20000078 	.word	0x20000078
 8000ef8:	20000000 	.word	0x20000000

08000efc <setModulation>:
*FUNCTION NAME:Modulation
*FUNCTION     :set CC1101 Modulation
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void setModulation(uint8_t m){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
if (m>4){m=4;}
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d901      	bls.n	8000f10 <setModulation+0x14>
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	71fb      	strb	r3, [r7, #7]
modulation = m;
 8000f10:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <setModulation+0xc8>)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	7013      	strb	r3, [r2, #0]
Split_MDMCFG2();
 8000f16:	f000 fd15 	bl	8001944 <Split_MDMCFG2>
switch (m)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d830      	bhi.n	8000f82 <setModulation+0x86>
 8000f20:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <setModulation+0x2c>)
 8000f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f26:	bf00      	nop
 8000f28:	08000f3d 	.word	0x08000f3d
 8000f2c:	08000f4b 	.word	0x08000f4b
 8000f30:	08000f59 	.word	0x08000f59
 8000f34:	08000f67 	.word	0x08000f67
 8000f38:	08000f75 	.word	0x08000f75
{
case 0: m2MODFM=0x00; frend0=0x10; break; // 2-FSK
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <setModulation+0xcc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <setModulation+0xd0>)
 8000f44:	2210      	movs	r2, #16
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e01b      	b.n	8000f82 <setModulation+0x86>
case 1: m2MODFM=0x10; frend0=0x10; break; // GFSK
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <setModulation+0xcc>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <setModulation+0xd0>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e014      	b.n	8000f82 <setModulation+0x86>
case 2: m2MODFM=0x30; frend0=0x11; break; // ASK
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <setModulation+0xcc>)
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <setModulation+0xd0>)
 8000f60:	2211      	movs	r2, #17
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e00d      	b.n	8000f82 <setModulation+0x86>
case 3: m2MODFM=0x40; frend0=0x10; break; // 4-FSK
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <setModulation+0xcc>)
 8000f68:	2240      	movs	r2, #64	; 0x40
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <setModulation+0xd0>)
 8000f6e:	2210      	movs	r2, #16
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e006      	b.n	8000f82 <setModulation+0x86>
case 4: m2MODFM=0x70; frend0=0x10; break; // MSK
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <setModulation+0xcc>)
 8000f76:	2270      	movs	r2, #112	; 0x70
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <setModulation+0xd0>)
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	bf00      	nop
}
SpiWriteReg(CC1101_MDMCFG2, m2DCOFF+m2MODFM+m2MANCH+m2SYNCM);
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <setModulation+0xd4>)
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <setModulation+0xcc>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <setModulation+0xd8>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <setModulation+0xdc>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2012      	movs	r0, #18
 8000fa2:	f7ff fe5d 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_FREND0,   frend0);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <setModulation+0xd0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	2022      	movs	r0, #34	; 0x22
 8000fae:	f7ff fe57 	bl	8000c60 <SpiWriteReg>
setPA(pa);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <setModulation+0xe0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f812 	bl	8000fe0 <setPA>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	2000007a 	.word	0x2000007a
 8000fcc:	20000074 	.word	0x20000074
 8000fd0:	20000079 	.word	0x20000079
 8000fd4:	2000007b 	.word	0x2000007b
 8000fd8:	2000007c 	.word	0x2000007c
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <setPA>:
*FUNCTION     :set CC1101 PA Power
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void setPA(int p)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
int a;
pa = p;
 8000fe8:	4a89      	ldr	r2, [pc, #548]	; (8001210 <setPA+0x230>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]

if (MHz >= 300 && MHz <= 348){
 8000fee:	4b89      	ldr	r3, [pc, #548]	; (8001214 <setPA+0x234>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4989      	ldr	r1, [pc, #548]	; (8001218 <setPA+0x238>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fdff 	bl	8000bf8 <__aeabi_fcmpge>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d06b      	beq.n	80010d8 <setPA+0xf8>
 8001000:	4b84      	ldr	r3, [pc, #528]	; (8001214 <setPA+0x234>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4985      	ldr	r1, [pc, #532]	; (800121c <setPA+0x23c>)
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fdec 	bl	8000be4 <__aeabi_fcmple>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d062      	beq.n	80010d8 <setPA+0xf8>
if (pa <= -30){a = PA_TABLE_315[0];}
 8001012:	4b7f      	ldr	r3, [pc, #508]	; (8001210 <setPA+0x230>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f113 0f1d 	cmn.w	r3, #29
 800101a:	da03      	bge.n	8001024 <setPA+0x44>
 800101c:	4b80      	ldr	r3, [pc, #512]	; (8001220 <setPA+0x240>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e055      	b.n	80010d0 <setPA+0xf0>
else if (pa > -30 && pa <= -20){a = PA_TABLE_315[1];}
 8001024:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <setPA+0x230>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f113 0f1d 	cmn.w	r3, #29
 800102c:	db08      	blt.n	8001040 <setPA+0x60>
 800102e:	4b78      	ldr	r3, [pc, #480]	; (8001210 <setPA+0x230>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f113 0f13 	cmn.w	r3, #19
 8001036:	da03      	bge.n	8001040 <setPA+0x60>
 8001038:	4b79      	ldr	r3, [pc, #484]	; (8001220 <setPA+0x240>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e047      	b.n	80010d0 <setPA+0xf0>
else if (pa > -20 && pa <= -15){a = PA_TABLE_315[2];}
 8001040:	4b73      	ldr	r3, [pc, #460]	; (8001210 <setPA+0x230>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f113 0f13 	cmn.w	r3, #19
 8001048:	db08      	blt.n	800105c <setPA+0x7c>
 800104a:	4b71      	ldr	r3, [pc, #452]	; (8001210 <setPA+0x230>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f113 0f0e 	cmn.w	r3, #14
 8001052:	da03      	bge.n	800105c <setPA+0x7c>
 8001054:	4b72      	ldr	r3, [pc, #456]	; (8001220 <setPA+0x240>)
 8001056:	789b      	ldrb	r3, [r3, #2]
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e039      	b.n	80010d0 <setPA+0xf0>
else if (pa > -15 && pa <= -10){a = PA_TABLE_315[3];}
 800105c:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <setPA+0x230>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f113 0f0e 	cmn.w	r3, #14
 8001064:	db08      	blt.n	8001078 <setPA+0x98>
 8001066:	4b6a      	ldr	r3, [pc, #424]	; (8001210 <setPA+0x230>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f113 0f09 	cmn.w	r3, #9
 800106e:	da03      	bge.n	8001078 <setPA+0x98>
 8001070:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <setPA+0x240>)
 8001072:	78db      	ldrb	r3, [r3, #3]
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e02b      	b.n	80010d0 <setPA+0xf0>
else if (pa > -10 && pa <= 0){a = PA_TABLE_315[4];}
 8001078:	4b65      	ldr	r3, [pc, #404]	; (8001210 <setPA+0x230>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f113 0f09 	cmn.w	r3, #9
 8001080:	db07      	blt.n	8001092 <setPA+0xb2>
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <setPA+0x230>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	dc03      	bgt.n	8001092 <setPA+0xb2>
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <setPA+0x240>)
 800108c:	791b      	ldrb	r3, [r3, #4]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e01e      	b.n	80010d0 <setPA+0xf0>
else if (pa > 0 && pa <= 5){a = PA_TABLE_315[5];}
 8001092:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <setPA+0x230>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	dd07      	ble.n	80010aa <setPA+0xca>
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <setPA+0x230>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	dc03      	bgt.n	80010aa <setPA+0xca>
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <setPA+0x240>)
 80010a4:	795b      	ldrb	r3, [r3, #5]
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e012      	b.n	80010d0 <setPA+0xf0>
else if (pa > 5 && pa <= 7){a = PA_TABLE_315[6];}
 80010aa:	4b59      	ldr	r3, [pc, #356]	; (8001210 <setPA+0x230>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	dd07      	ble.n	80010c2 <setPA+0xe2>
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <setPA+0x230>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	dc03      	bgt.n	80010c2 <setPA+0xe2>
 80010ba:	4b59      	ldr	r3, [pc, #356]	; (8001220 <setPA+0x240>)
 80010bc:	799b      	ldrb	r3, [r3, #6]
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e006      	b.n	80010d0 <setPA+0xf0>
else if (pa > 7){a = PA_TABLE_315[7];}
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <setPA+0x230>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	dd02      	ble.n	80010d0 <setPA+0xf0>
 80010ca:	4b55      	ldr	r3, [pc, #340]	; (8001220 <setPA+0x240>)
 80010cc:	79db      	ldrb	r3, [r3, #7]
 80010ce:	60fb      	str	r3, [r7, #12]
last_pa = 1;
 80010d0:	4b54      	ldr	r3, [pc, #336]	; (8001224 <setPA+0x244>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e1c3      	b.n	8001460 <setPA+0x480>
}
else if (MHz >= 378 && MHz <= 464){
 80010d8:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <setPA+0x234>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4952      	ldr	r1, [pc, #328]	; (8001228 <setPA+0x248>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fd8a 	bl	8000bf8 <__aeabi_fcmpge>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d06b      	beq.n	80011c2 <setPA+0x1e2>
 80010ea:	4b4a      	ldr	r3, [pc, #296]	; (8001214 <setPA+0x234>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	494f      	ldr	r1, [pc, #316]	; (800122c <setPA+0x24c>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fd77 	bl	8000be4 <__aeabi_fcmple>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d062      	beq.n	80011c2 <setPA+0x1e2>
if (pa <= -30){a = PA_TABLE_433[0];}
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <setPA+0x230>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f113 0f1d 	cmn.w	r3, #29
 8001104:	da03      	bge.n	800110e <setPA+0x12e>
 8001106:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <setPA+0x250>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e055      	b.n	80011ba <setPA+0x1da>
else if (pa > -30 && pa <= -20){a = PA_TABLE_433[1];}
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <setPA+0x230>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f113 0f1d 	cmn.w	r3, #29
 8001116:	db08      	blt.n	800112a <setPA+0x14a>
 8001118:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <setPA+0x230>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f113 0f13 	cmn.w	r3, #19
 8001120:	da03      	bge.n	800112a <setPA+0x14a>
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <setPA+0x250>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e047      	b.n	80011ba <setPA+0x1da>
else if (pa > -20 && pa <= -15){a = PA_TABLE_433[2];}
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <setPA+0x230>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f113 0f13 	cmn.w	r3, #19
 8001132:	db08      	blt.n	8001146 <setPA+0x166>
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <setPA+0x230>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f113 0f0e 	cmn.w	r3, #14
 800113c:	da03      	bge.n	8001146 <setPA+0x166>
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <setPA+0x250>)
 8001140:	789b      	ldrb	r3, [r3, #2]
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e039      	b.n	80011ba <setPA+0x1da>
else if (pa > -15 && pa <= -10){a = PA_TABLE_433[3];}
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <setPA+0x230>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f113 0f0e 	cmn.w	r3, #14
 800114e:	db08      	blt.n	8001162 <setPA+0x182>
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <setPA+0x230>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f113 0f09 	cmn.w	r3, #9
 8001158:	da03      	bge.n	8001162 <setPA+0x182>
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <setPA+0x250>)
 800115c:	78db      	ldrb	r3, [r3, #3]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e02b      	b.n	80011ba <setPA+0x1da>
else if (pa > -10 && pa <= 0){a = PA_TABLE_433[4];}
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <setPA+0x230>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f113 0f09 	cmn.w	r3, #9
 800116a:	db07      	blt.n	800117c <setPA+0x19c>
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <setPA+0x230>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dc03      	bgt.n	800117c <setPA+0x19c>
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <setPA+0x250>)
 8001176:	791b      	ldrb	r3, [r3, #4]
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e01e      	b.n	80011ba <setPA+0x1da>
else if (pa > 0 && pa <= 5){a = PA_TABLE_433[5];}
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <setPA+0x230>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd07      	ble.n	8001194 <setPA+0x1b4>
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <setPA+0x230>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b05      	cmp	r3, #5
 800118a:	dc03      	bgt.n	8001194 <setPA+0x1b4>
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <setPA+0x250>)
 800118e:	795b      	ldrb	r3, [r3, #5]
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e012      	b.n	80011ba <setPA+0x1da>
else if (pa > 5 && pa <= 7){a = PA_TABLE_433[6];}
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <setPA+0x230>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b05      	cmp	r3, #5
 800119a:	dd07      	ble.n	80011ac <setPA+0x1cc>
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <setPA+0x230>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	dc03      	bgt.n	80011ac <setPA+0x1cc>
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <setPA+0x250>)
 80011a6:	799b      	ldrb	r3, [r3, #6]
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e006      	b.n	80011ba <setPA+0x1da>
else if (pa > 7){a = PA_TABLE_433[7];}
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <setPA+0x230>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	dd02      	ble.n	80011ba <setPA+0x1da>
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <setPA+0x250>)
 80011b6:	79db      	ldrb	r3, [r3, #7]
 80011b8:	60fb      	str	r3, [r7, #12]
last_pa = 2;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <setPA+0x244>)
 80011bc:	2202      	movs	r2, #2
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e14e      	b.n	8001460 <setPA+0x480>
}
else if (MHz >= 779 && MHz <= 899.99){
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <setPA+0x234>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	491b      	ldr	r1, [pc, #108]	; (8001234 <setPA+0x254>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fd15 	bl	8000bf8 <__aeabi_fcmpge>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80a7 	beq.w	8001324 <setPA+0x344>
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <setPA+0x234>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f91c 	bl	8000418 <__aeabi_f2d>
 80011e0:	a309      	add	r3, pc, #36	; (adr r3, 8001208 <setPA+0x228>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff f9d9 	bl	800059c <__aeabi_dcmple>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 8099 	beq.w	8001324 <setPA+0x344>
if (pa <= -30){a = PA_TABLE_868[0];}
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <setPA+0x230>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f113 0f1d 	cmn.w	r3, #29
 80011fa:	da1f      	bge.n	800123c <setPA+0x25c>
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <setPA+0x258>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e08b      	b.n	800131c <setPA+0x33c>
 8001204:	f3af 8000 	nop.w
 8001208:	851eb852 	.word	0x851eb852
 800120c:	408c1feb 	.word	0x408c1feb
 8001210:	20000004 	.word	0x20000004
 8001214:	20000008 	.word	0x20000008
 8001218:	43960000 	.word	0x43960000
 800121c:	43ae0000 	.word	0x43ae0000
 8001220:	20000024 	.word	0x20000024
 8001224:	20000076 	.word	0x20000076
 8001228:	43bd0000 	.word	0x43bd0000
 800122c:	43e80000 	.word	0x43e80000
 8001230:	2000002c 	.word	0x2000002c
 8001234:	4442c000 	.word	0x4442c000
 8001238:	20000034 	.word	0x20000034
else if (pa > -30 && pa <= -20){a = PA_TABLE_868[1];}
 800123c:	4b7c      	ldr	r3, [pc, #496]	; (8001430 <setPA+0x450>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f113 0f1d 	cmn.w	r3, #29
 8001244:	db08      	blt.n	8001258 <setPA+0x278>
 8001246:	4b7a      	ldr	r3, [pc, #488]	; (8001430 <setPA+0x450>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f113 0f13 	cmn.w	r3, #19
 800124e:	da03      	bge.n	8001258 <setPA+0x278>
 8001250:	4b78      	ldr	r3, [pc, #480]	; (8001434 <setPA+0x454>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e061      	b.n	800131c <setPA+0x33c>
else if (pa > -20 && pa <= -15){a = PA_TABLE_868[2];}
 8001258:	4b75      	ldr	r3, [pc, #468]	; (8001430 <setPA+0x450>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f113 0f13 	cmn.w	r3, #19
 8001260:	db08      	blt.n	8001274 <setPA+0x294>
 8001262:	4b73      	ldr	r3, [pc, #460]	; (8001430 <setPA+0x450>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f113 0f0e 	cmn.w	r3, #14
 800126a:	da03      	bge.n	8001274 <setPA+0x294>
 800126c:	4b71      	ldr	r3, [pc, #452]	; (8001434 <setPA+0x454>)
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	e053      	b.n	800131c <setPA+0x33c>
else if (pa > -15 && pa <= -10){a = PA_TABLE_868[3];}
 8001274:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <setPA+0x450>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f113 0f0e 	cmn.w	r3, #14
 800127c:	db08      	blt.n	8001290 <setPA+0x2b0>
 800127e:	4b6c      	ldr	r3, [pc, #432]	; (8001430 <setPA+0x450>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f113 0f09 	cmn.w	r3, #9
 8001286:	da03      	bge.n	8001290 <setPA+0x2b0>
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <setPA+0x454>)
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e045      	b.n	800131c <setPA+0x33c>
else if (pa > -10 && pa <= -6){a = PA_TABLE_868[4];}
 8001290:	4b67      	ldr	r3, [pc, #412]	; (8001430 <setPA+0x450>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f113 0f09 	cmn.w	r3, #9
 8001298:	db08      	blt.n	80012ac <setPA+0x2cc>
 800129a:	4b65      	ldr	r3, [pc, #404]	; (8001430 <setPA+0x450>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f113 0f05 	cmn.w	r3, #5
 80012a2:	da03      	bge.n	80012ac <setPA+0x2cc>
 80012a4:	4b63      	ldr	r3, [pc, #396]	; (8001434 <setPA+0x454>)
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e037      	b.n	800131c <setPA+0x33c>
else if (pa > -6 && pa <= 0){a = PA_TABLE_868[5];}
 80012ac:	4b60      	ldr	r3, [pc, #384]	; (8001430 <setPA+0x450>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f113 0f05 	cmn.w	r3, #5
 80012b4:	db07      	blt.n	80012c6 <setPA+0x2e6>
 80012b6:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <setPA+0x450>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dc03      	bgt.n	80012c6 <setPA+0x2e6>
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <setPA+0x454>)
 80012c0:	795b      	ldrb	r3, [r3, #5]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e02a      	b.n	800131c <setPA+0x33c>
else if (pa > 0 && pa <= 5){a = PA_TABLE_868[6];}
 80012c6:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <setPA+0x450>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dd07      	ble.n	80012de <setPA+0x2fe>
 80012ce:	4b58      	ldr	r3, [pc, #352]	; (8001430 <setPA+0x450>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	dc03      	bgt.n	80012de <setPA+0x2fe>
 80012d6:	4b57      	ldr	r3, [pc, #348]	; (8001434 <setPA+0x454>)
 80012d8:	799b      	ldrb	r3, [r3, #6]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e01e      	b.n	800131c <setPA+0x33c>
else if (pa > 5 && pa <= 7){a = PA_TABLE_868[7];}
 80012de:	4b54      	ldr	r3, [pc, #336]	; (8001430 <setPA+0x450>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	dd07      	ble.n	80012f6 <setPA+0x316>
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <setPA+0x450>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	dc03      	bgt.n	80012f6 <setPA+0x316>
 80012ee:	4b51      	ldr	r3, [pc, #324]	; (8001434 <setPA+0x454>)
 80012f0:	79db      	ldrb	r3, [r3, #7]
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e012      	b.n	800131c <setPA+0x33c>
else if (pa > 7 && pa <= 10){a = PA_TABLE_868[8];}
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <setPA+0x450>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b07      	cmp	r3, #7
 80012fc:	dd07      	ble.n	800130e <setPA+0x32e>
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <setPA+0x450>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b0a      	cmp	r3, #10
 8001304:	dc03      	bgt.n	800130e <setPA+0x32e>
 8001306:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <setPA+0x454>)
 8001308:	7a1b      	ldrb	r3, [r3, #8]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e006      	b.n	800131c <setPA+0x33c>
else if (pa > 10){a = PA_TABLE_868[9];}
 800130e:	4b48      	ldr	r3, [pc, #288]	; (8001430 <setPA+0x450>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	dd02      	ble.n	800131c <setPA+0x33c>
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <setPA+0x454>)
 8001318:	7a5b      	ldrb	r3, [r3, #9]
 800131a:	60fb      	str	r3, [r7, #12]
last_pa = 3;
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <setPA+0x458>)
 800131e:	2203      	movs	r2, #3
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e09d      	b.n	8001460 <setPA+0x480>
}
else if (MHz >= 900 && MHz <= 928){
 8001324:	4b45      	ldr	r3, [pc, #276]	; (800143c <setPA+0x45c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4945      	ldr	r1, [pc, #276]	; (8001440 <setPA+0x460>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fc64 	bl	8000bf8 <__aeabi_fcmpge>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8094 	beq.w	8001460 <setPA+0x480>
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <setPA+0x45c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4941      	ldr	r1, [pc, #260]	; (8001444 <setPA+0x464>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc50 	bl	8000be4 <__aeabi_fcmple>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 808a 	beq.w	8001460 <setPA+0x480>
if (pa <= -30){a = PA_TABLE_915[0];}
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <setPA+0x450>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f113 0f1d 	cmn.w	r3, #29
 8001354:	da03      	bge.n	800135e <setPA+0x37e>
 8001356:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <setPA+0x468>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e07d      	b.n	800145a <setPA+0x47a>
else if (pa > -30 && pa <= -20){a = PA_TABLE_915[1];}
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <setPA+0x450>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f113 0f1d 	cmn.w	r3, #29
 8001366:	db08      	blt.n	800137a <setPA+0x39a>
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <setPA+0x450>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f113 0f13 	cmn.w	r3, #19
 8001370:	da03      	bge.n	800137a <setPA+0x39a>
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <setPA+0x468>)
 8001374:	785b      	ldrb	r3, [r3, #1]
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e06f      	b.n	800145a <setPA+0x47a>
else if (pa > -20 && pa <= -15){a = PA_TABLE_915[2];}
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <setPA+0x450>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f113 0f13 	cmn.w	r3, #19
 8001382:	db08      	blt.n	8001396 <setPA+0x3b6>
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <setPA+0x450>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f113 0f0e 	cmn.w	r3, #14
 800138c:	da03      	bge.n	8001396 <setPA+0x3b6>
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <setPA+0x468>)
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e061      	b.n	800145a <setPA+0x47a>
else if (pa > -15 && pa <= -10){a = PA_TABLE_915[3];}
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <setPA+0x450>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f113 0f0e 	cmn.w	r3, #14
 800139e:	db08      	blt.n	80013b2 <setPA+0x3d2>
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <setPA+0x450>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f113 0f09 	cmn.w	r3, #9
 80013a8:	da03      	bge.n	80013b2 <setPA+0x3d2>
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <setPA+0x468>)
 80013ac:	78db      	ldrb	r3, [r3, #3]
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e053      	b.n	800145a <setPA+0x47a>
else if (pa > -10 && pa <= -6){a = PA_TABLE_915[4];}
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <setPA+0x450>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f113 0f09 	cmn.w	r3, #9
 80013ba:	db08      	blt.n	80013ce <setPA+0x3ee>
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <setPA+0x450>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f113 0f05 	cmn.w	r3, #5
 80013c4:	da03      	bge.n	80013ce <setPA+0x3ee>
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <setPA+0x468>)
 80013c8:	791b      	ldrb	r3, [r3, #4]
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e045      	b.n	800145a <setPA+0x47a>
else if (pa > -6 && pa <= 0){a = PA_TABLE_915[5];}
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <setPA+0x450>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f113 0f05 	cmn.w	r3, #5
 80013d6:	db07      	blt.n	80013e8 <setPA+0x408>
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <setPA+0x450>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dc03      	bgt.n	80013e8 <setPA+0x408>
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <setPA+0x468>)
 80013e2:	795b      	ldrb	r3, [r3, #5]
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e038      	b.n	800145a <setPA+0x47a>
else if (pa > 0 && pa <= 5){a = PA_TABLE_915[6];}
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <setPA+0x450>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd07      	ble.n	8001400 <setPA+0x420>
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <setPA+0x450>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	dc03      	bgt.n	8001400 <setPA+0x420>
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <setPA+0x468>)
 80013fa:	799b      	ldrb	r3, [r3, #6]
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	e02c      	b.n	800145a <setPA+0x47a>
else if (pa > 5 && pa <= 7){a = PA_TABLE_915[7];}
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <setPA+0x450>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b05      	cmp	r3, #5
 8001406:	dd07      	ble.n	8001418 <setPA+0x438>
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <setPA+0x450>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b07      	cmp	r3, #7
 800140e:	dc03      	bgt.n	8001418 <setPA+0x438>
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <setPA+0x468>)
 8001412:	79db      	ldrb	r3, [r3, #7]
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e020      	b.n	800145a <setPA+0x47a>
else if (pa > 7 && pa <= 10){a = PA_TABLE_915[8];}
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <setPA+0x450>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b07      	cmp	r3, #7
 800141e:	dd15      	ble.n	800144c <setPA+0x46c>
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <setPA+0x450>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b0a      	cmp	r3, #10
 8001426:	dc11      	bgt.n	800144c <setPA+0x46c>
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <setPA+0x468>)
 800142a:	7a1b      	ldrb	r3, [r3, #8]
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e014      	b.n	800145a <setPA+0x47a>
 8001430:	20000004 	.word	0x20000004
 8001434:	20000034 	.word	0x20000034
 8001438:	20000076 	.word	0x20000076
 800143c:	20000008 	.word	0x20000008
 8001440:	44610000 	.word	0x44610000
 8001444:	44680000 	.word	0x44680000
 8001448:	20000040 	.word	0x20000040
else if (pa > 10){a = PA_TABLE_915[9];}
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <setPA+0x4b8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b0a      	cmp	r3, #10
 8001452:	dd02      	ble.n	800145a <setPA+0x47a>
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <setPA+0x4bc>)
 8001456:	7a5b      	ldrb	r3, [r3, #9]
 8001458:	60fb      	str	r3, [r7, #12]
last_pa = 4;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <setPA+0x4c0>)
 800145c:	2204      	movs	r2, #4
 800145e:	701a      	strb	r2, [r3, #0]
}
if (modulation == 2){
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <setPA+0x4c4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d107      	bne.n	8001478 <setPA+0x498>
PA_TABLE[0] = 0;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <setPA+0x4c8>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
PA_TABLE[1] = a;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <setPA+0x4c8>)
 8001474:	705a      	strb	r2, [r3, #1]
 8001476:	e006      	b.n	8001486 <setPA+0x4a6>
}else{
PA_TABLE[0] = a;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <setPA+0x4c8>)
 800147e:	701a      	strb	r2, [r3, #0]
PA_TABLE[1] = 0;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <setPA+0x4c8>)
 8001482:	2200      	movs	r2, #0
 8001484:	705a      	strb	r2, [r3, #1]
}
SpiWriteBurstReg(CC1101_PATABLE,PA_TABLE,8);
 8001486:	2208      	movs	r2, #8
 8001488:	4907      	ldr	r1, [pc, #28]	; (80014a8 <setPA+0x4c8>)
 800148a:	203e      	movs	r0, #62	; 0x3e
 800148c:	f7ff fc0e 	bl	8000cac <SpiWriteBurstReg>
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000004 	.word	0x20000004
 800149c:	20000040 	.word	0x20000040
 80014a0:	20000076 	.word	0x20000076
 80014a4:	20000000 	.word	0x20000000
 80014a8:	2000001c 	.word	0x2000001c
 80014ac:	00000000 	.word	0x00000000

080014b0 <setMHZ>:
*FUNCTION NAME:Frequency Calculator
*FUNCTION     :Calculate the basic frequency.
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void setMHZ(float mhz){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
uint8_t freq2 = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
uint8_t freq1 = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73bb      	strb	r3, [r7, #14]
uint8_t freq0 = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	737b      	strb	r3, [r7, #13]

MHz = mhz;
 80014c4:	4a32      	ldr	r2, [pc, #200]	; (8001590 <setMHZ+0xe0>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]

for (uint8_t i = 0; i==0;){
 80014ca:	2300      	movs	r3, #0
 80014cc:	733b      	strb	r3, [r7, #12]
 80014ce:	e042      	b.n	8001556 <setMHZ+0xa6>
if (mhz >= 26){
 80014d0:	4930      	ldr	r1, [pc, #192]	; (8001594 <setMHZ+0xe4>)
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fb90 	bl	8000bf8 <__aeabi_fcmpge>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <setMHZ+0x42>
mhz-=26;
 80014de:	492d      	ldr	r1, [pc, #180]	; (8001594 <setMHZ+0xe4>)
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff f8cd 	bl	8000680 <__aeabi_fsub>
 80014e6:	4603      	mov	r3, r0
 80014e8:	607b      	str	r3, [r7, #4]
freq2+=1;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3301      	adds	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e031      	b.n	8001556 <setMHZ+0xa6>
}
else if (mhz >= 0.1015625){
 80014f2:	4929      	ldr	r1, [pc, #164]	; (8001598 <setMHZ+0xe8>)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fb7f 	bl	8000bf8 <__aeabi_fcmpge>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d009      	beq.n	8001514 <setMHZ+0x64>
mhz-=0.1015625;
 8001500:	4925      	ldr	r1, [pc, #148]	; (8001598 <setMHZ+0xe8>)
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff f8bc 	bl	8000680 <__aeabi_fsub>
 8001508:	4603      	mov	r3, r0
 800150a:	607b      	str	r3, [r7, #4]
freq1+=1;
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	3301      	adds	r3, #1
 8001510:	73bb      	strb	r3, [r7, #14]
 8001512:	e020      	b.n	8001556 <setMHZ+0xa6>
}
else if (mhz >= 0.00039675){
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7fe ff7f 	bl	8000418 <__aeabi_f2d>
 800151a:	a31b      	add	r3, pc, #108	; (adr r3, 8001588 <setMHZ+0xd8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f846 	bl	80005b0 <__aeabi_dcmpge>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d013      	beq.n	8001552 <setMHZ+0xa2>
mhz-=0.00039675;
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7fe ff74 	bl	8000418 <__aeabi_f2d>
 8001530:	a315      	add	r3, pc, #84	; (adr r3, 8001588 <setMHZ+0xd8>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7fe fe0f 	bl	8000158 <__aeabi_dsub>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff f849 	bl	80005d8 <__aeabi_d2f>
 8001546:	4603      	mov	r3, r0
 8001548:	607b      	str	r3, [r7, #4]
freq0+=1;
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	3301      	adds	r3, #1
 800154e:	737b      	strb	r3, [r7, #13]
 8001550:	e001      	b.n	8001556 <setMHZ+0xa6>
}
else{i=1;}
 8001552:	2301      	movs	r3, #1
 8001554:	733b      	strb	r3, [r7, #12]
for (uint8_t i = 0; i==0;){
 8001556:	7b3b      	ldrb	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0b9      	beq.n	80014d0 <setMHZ+0x20>
}
if (freq0 > 255){freq1+=1;freq0-=256;}

SpiWriteReg(CC1101_FREQ2, freq2);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4619      	mov	r1, r3
 8001560:	200d      	movs	r0, #13
 8001562:	f7ff fb7d 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_FREQ1, freq1);
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	4619      	mov	r1, r3
 800156a:	200e      	movs	r0, #14
 800156c:	f7ff fb78 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_FREQ0, freq0);
 8001570:	7b7b      	ldrb	r3, [r7, #13]
 8001572:	4619      	mov	r1, r3
 8001574:	200f      	movs	r0, #15
 8001576:	f7ff fb73 	bl	8000c60 <SpiWriteReg>

Calibrate(); //preformed at the end of a frequency change.
 800157a:	f000 f811 	bl	80015a0 <Calibrate>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	4651f3e9 	.word	0x4651f3e9
 800158c:	3f3a005c 	.word	0x3f3a005c
 8001590:	20000008 	.word	0x20000008
 8001594:	41d00000 	.word	0x41d00000
 8001598:	3dd00000 	.word	0x3dd00000
 800159c:	00000000 	.word	0x00000000

080015a0 <Calibrate>:
*FUNCTION NAME:Calibrate
*FUNCTION     :Calibrate frequency
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void Calibrate(void){
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af02      	add	r7, sp, #8

if (MHz >= 300 && MHz <= 348){
 80015a6:	4b98      	ldr	r3, [pc, #608]	; (8001808 <Calibrate+0x268>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4998      	ldr	r1, [pc, #608]	; (800180c <Calibrate+0x26c>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fb23 	bl	8000bf8 <__aeabi_fcmpge>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d053      	beq.n	8001660 <Calibrate+0xc0>
 80015b8:	4b93      	ldr	r3, [pc, #588]	; (8001808 <Calibrate+0x268>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4994      	ldr	r1, [pc, #592]	; (8001810 <Calibrate+0x270>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fb10 	bl	8000be4 <__aeabi_fcmple>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d04a      	beq.n	8001660 <Calibrate+0xc0>
SpiWriteReg(CC1101_FSCTRL0, map(MHz, 300, 348, clb1[0], clb1[1]));
 80015ca:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <Calibrate+0x268>)
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	4b91      	ldr	r3, [pc, #580]	; (8001814 <Calibrate+0x274>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f906 	bl	80007e4 <__aeabi_ui2f>
 80015d8:	4605      	mov	r5, r0
 80015da:	4b8e      	ldr	r3, [pc, #568]	; (8001814 <Calibrate+0x274>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff f900 	bl	80007e4 <__aeabi_ui2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	462b      	mov	r3, r5
 80015ea:	4a89      	ldr	r2, [pc, #548]	; (8001810 <Calibrate+0x270>)
 80015ec:	4987      	ldr	r1, [pc, #540]	; (800180c <Calibrate+0x26c>)
 80015ee:	4620      	mov	r0, r4
 80015f0:	f000 fa7e 	bl	8001af0 <map>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4619      	mov	r1, r3
 80015f8:	200c      	movs	r0, #12
 80015fa:	f7ff fb31 	bl	8000c60 <SpiWriteReg>
if (MHz < 322.88){SpiWriteReg(CC1101_TEST0,0x0B);}
 80015fe:	4b82      	ldr	r3, [pc, #520]	; (8001808 <Calibrate+0x268>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff08 	bl	8000418 <__aeabi_f2d>
 8001608:	a37b      	add	r3, pc, #492	; (adr r3, 80017f8 <Calibrate+0x258>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe ffbb 	bl	8000588 <__aeabi_dcmplt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <Calibrate+0x82>
 8001618:	210b      	movs	r1, #11
 800161a:	202e      	movs	r0, #46	; 0x2e
 800161c:	f7ff fb20 	bl	8000c60 <SpiWriteReg>
 8001620:	e14a      	b.n	80018b8 <Calibrate+0x318>
else{
SpiWriteReg(CC1101_TEST0,0x09);
 8001622:	2109      	movs	r1, #9
 8001624:	202e      	movs	r0, #46	; 0x2e
 8001626:	f7ff fb1b 	bl	8000c60 <SpiWriteReg>
int s = SpiReadStatus(CC1101_FSCAL2);
 800162a:	2024      	movs	r0, #36	; 0x24
 800162c:	f7ff fbe4 	bl	8000df8 <SpiReadStatus>
 8001630:	4603      	mov	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]
if (s<32){SpiWriteReg(CC1101_FSCAL2, s+32);}
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b1f      	cmp	r3, #31
 8001638:	dc07      	bgt.n	800164a <Calibrate+0xaa>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	3320      	adds	r3, #32
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	2024      	movs	r0, #36	; 0x24
 8001646:	f7ff fb0b 	bl	8000c60 <SpiWriteReg>
if (last_pa != 1){setPA(pa);}
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <Calibrate+0x278>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	f000 8132 	beq.w	80018b8 <Calibrate+0x318>
 8001654:	4b71      	ldr	r3, [pc, #452]	; (800181c <Calibrate+0x27c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fcc1 	bl	8000fe0 <setPA>
if (MHz < 322.88){SpiWriteReg(CC1101_TEST0,0x0B);}
 800165e:	e12b      	b.n	80018b8 <Calibrate+0x318>
}
}
else if (MHz >= 378 && MHz <= 464){
 8001660:	4b69      	ldr	r3, [pc, #420]	; (8001808 <Calibrate+0x268>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	496e      	ldr	r1, [pc, #440]	; (8001820 <Calibrate+0x280>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fac6 	bl	8000bf8 <__aeabi_fcmpge>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04f      	beq.n	8001712 <Calibrate+0x172>
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <Calibrate+0x268>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	496b      	ldr	r1, [pc, #428]	; (8001824 <Calibrate+0x284>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fab3 	bl	8000be4 <__aeabi_fcmple>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d046      	beq.n	8001712 <Calibrate+0x172>
SpiWriteReg(CC1101_FSCTRL0, map(MHz, 378, 464, clb2[0], clb2[1]));
 8001684:	4b60      	ldr	r3, [pc, #384]	; (8001808 <Calibrate+0x268>)
 8001686:	681c      	ldr	r4, [r3, #0]
 8001688:	4b67      	ldr	r3, [pc, #412]	; (8001828 <Calibrate+0x288>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff f8a9 	bl	80007e4 <__aeabi_ui2f>
 8001692:	4605      	mov	r5, r0
 8001694:	4b64      	ldr	r3, [pc, #400]	; (8001828 <Calibrate+0x288>)
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff f8a3 	bl	80007e4 <__aeabi_ui2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	462b      	mov	r3, r5
 80016a4:	4a5f      	ldr	r2, [pc, #380]	; (8001824 <Calibrate+0x284>)
 80016a6:	495e      	ldr	r1, [pc, #376]	; (8001820 <Calibrate+0x280>)
 80016a8:	4620      	mov	r0, r4
 80016aa:	f000 fa21 	bl	8001af0 <map>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	200c      	movs	r0, #12
 80016b4:	f7ff fad4 	bl	8000c60 <SpiWriteReg>
if (MHz < 430.5){SpiWriteReg(CC1101_TEST0,0x0B);}
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <Calibrate+0x268>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	495b      	ldr	r1, [pc, #364]	; (800182c <Calibrate+0x28c>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fa86 	bl	8000bd0 <__aeabi_fcmplt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <Calibrate+0x134>
 80016ca:	210b      	movs	r1, #11
 80016cc:	202e      	movs	r0, #46	; 0x2e
 80016ce:	f7ff fac7 	bl	8000c60 <SpiWriteReg>
 80016d2:	e0f3      	b.n	80018bc <Calibrate+0x31c>
else{
SpiWriteReg(CC1101_TEST0,0x09);
 80016d4:	2109      	movs	r1, #9
 80016d6:	202e      	movs	r0, #46	; 0x2e
 80016d8:	f7ff fac2 	bl	8000c60 <SpiWriteReg>
int s = SpiReadStatus(CC1101_FSCAL2);
 80016dc:	2024      	movs	r0, #36	; 0x24
 80016de:	f7ff fb8b 	bl	8000df8 <SpiReadStatus>
 80016e2:	4603      	mov	r3, r0
 80016e4:	60bb      	str	r3, [r7, #8]
if (s<32){SpiWriteReg(CC1101_FSCAL2, s+32);}
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b1f      	cmp	r3, #31
 80016ea:	dc07      	bgt.n	80016fc <Calibrate+0x15c>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3320      	adds	r3, #32
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	2024      	movs	r0, #36	; 0x24
 80016f8:	f7ff fab2 	bl	8000c60 <SpiWriteReg>
if (last_pa != 2){setPA(pa);}
 80016fc:	4b46      	ldr	r3, [pc, #280]	; (8001818 <Calibrate+0x278>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	f000 80db 	beq.w	80018bc <Calibrate+0x31c>
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <Calibrate+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc68 	bl	8000fe0 <setPA>
if (MHz < 430.5){SpiWriteReg(CC1101_TEST0,0x0B);}
 8001710:	e0d4      	b.n	80018bc <Calibrate+0x31c>
}
}
else if (MHz >= 779 && MHz <= 899.99){
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <Calibrate+0x268>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4946      	ldr	r1, [pc, #280]	; (8001830 <Calibrate+0x290>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fa6d 	bl	8000bf8 <__aeabi_fcmpge>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d053      	beq.n	80017cc <Calibrate+0x22c>
 8001724:	4b38      	ldr	r3, [pc, #224]	; (8001808 <Calibrate+0x268>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fe75 	bl	8000418 <__aeabi_f2d>
 800172e:	a334      	add	r3, pc, #208	; (adr r3, 8001800 <Calibrate+0x260>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff32 	bl	800059c <__aeabi_dcmple>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d046      	beq.n	80017cc <Calibrate+0x22c>
SpiWriteReg(CC1101_FSCTRL0, map(MHz, 779, 899, clb3[0], clb3[1]));
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <Calibrate+0x268>)
 8001740:	681c      	ldr	r4, [r3, #0]
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <Calibrate+0x294>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f84c 	bl	80007e4 <__aeabi_ui2f>
 800174c:	4605      	mov	r5, r0
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <Calibrate+0x294>)
 8001750:	785b      	ldrb	r3, [r3, #1]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f846 	bl	80007e4 <__aeabi_ui2f>
 8001758:	4603      	mov	r3, r0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	462b      	mov	r3, r5
 800175e:	4a36      	ldr	r2, [pc, #216]	; (8001838 <Calibrate+0x298>)
 8001760:	4933      	ldr	r1, [pc, #204]	; (8001830 <Calibrate+0x290>)
 8001762:	4620      	mov	r0, r4
 8001764:	f000 f9c4 	bl	8001af0 <map>
 8001768:	4603      	mov	r3, r0
 800176a:	4619      	mov	r1, r3
 800176c:	200c      	movs	r0, #12
 800176e:	f7ff fa77 	bl	8000c60 <SpiWriteReg>
if (MHz < 861){SpiWriteReg(CC1101_TEST0,0x0B);}
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <Calibrate+0x268>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4931      	ldr	r1, [pc, #196]	; (800183c <Calibrate+0x29c>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fa29 	bl	8000bd0 <__aeabi_fcmplt>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <Calibrate+0x1ee>
 8001784:	210b      	movs	r1, #11
 8001786:	202e      	movs	r0, #46	; 0x2e
 8001788:	f7ff fa6a 	bl	8000c60 <SpiWriteReg>
 800178c:	e098      	b.n	80018c0 <Calibrate+0x320>
else{
SpiWriteReg(CC1101_TEST0,0x09);
 800178e:	2109      	movs	r1, #9
 8001790:	202e      	movs	r0, #46	; 0x2e
 8001792:	f7ff fa65 	bl	8000c60 <SpiWriteReg>
int s = SpiReadStatus(CC1101_FSCAL2);
 8001796:	2024      	movs	r0, #36	; 0x24
 8001798:	f7ff fb2e 	bl	8000df8 <SpiReadStatus>
 800179c:	4603      	mov	r3, r0
 800179e:	607b      	str	r3, [r7, #4]
if (s<32){SpiWriteReg(CC1101_FSCAL2, s+32);}
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b1f      	cmp	r3, #31
 80017a4:	dc07      	bgt.n	80017b6 <Calibrate+0x216>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3320      	adds	r3, #32
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4619      	mov	r1, r3
 80017b0:	2024      	movs	r0, #36	; 0x24
 80017b2:	f7ff fa55 	bl	8000c60 <SpiWriteReg>
if (last_pa != 3){setPA(pa);}
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <Calibrate+0x278>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	f000 8080 	beq.w	80018c0 <Calibrate+0x320>
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <Calibrate+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc0b 	bl	8000fe0 <setPA>
if (MHz < 861){SpiWriteReg(CC1101_TEST0,0x0B);}
 80017ca:	e079      	b.n	80018c0 <Calibrate+0x320>
}
}
else if (MHz >= 900 && MHz <= 928){
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <Calibrate+0x268>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	491b      	ldr	r1, [pc, #108]	; (8001840 <Calibrate+0x2a0>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fa10 	bl	8000bf8 <__aeabi_fcmpge>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <Calibrate+0x240>
SpiWriteReg(CC1101_TEST0,0x09);
int s = SpiReadStatus(CC1101_FSCAL2);
if (s<32){SpiWriteReg(CC1101_FSCAL2, s+32);}
if (last_pa != 4){setPA(pa);}
}
}
 80017de:	e070      	b.n	80018c2 <Calibrate+0x322>
else if (MHz >= 900 && MHz <= 928){
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <Calibrate+0x268>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4917      	ldr	r1, [pc, #92]	; (8001844 <Calibrate+0x2a4>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9fc 	bl	8000be4 <__aeabi_fcmple>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d12a      	bne.n	8001848 <Calibrate+0x2a8>
}
 80017f2:	e066      	b.n	80018c2 <Calibrate+0x322>
 80017f4:	f3af 8000 	nop.w
 80017f8:	7ae147ae 	.word	0x7ae147ae
 80017fc:	40742e14 	.word	0x40742e14
 8001800:	851eb852 	.word	0x851eb852
 8001804:	408c1feb 	.word	0x408c1feb
 8001808:	20000008 	.word	0x20000008
 800180c:	43960000 	.word	0x43960000
 8001810:	43ae0000 	.word	0x43ae0000
 8001814:	2000000c 	.word	0x2000000c
 8001818:	20000076 	.word	0x20000076
 800181c:	20000004 	.word	0x20000004
 8001820:	43bd0000 	.word	0x43bd0000
 8001824:	43e80000 	.word	0x43e80000
 8001828:	20000010 	.word	0x20000010
 800182c:	43d74000 	.word	0x43d74000
 8001830:	4442c000 	.word	0x4442c000
 8001834:	20000014 	.word	0x20000014
 8001838:	4460c000 	.word	0x4460c000
 800183c:	44574000 	.word	0x44574000
 8001840:	44610000 	.word	0x44610000
 8001844:	44680000 	.word	0x44680000
SpiWriteReg(CC1101_FSCTRL0, map(MHz, 900, 928, clb4[0], clb4[1]));
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <Calibrate+0x32c>)
 800184a:	681c      	ldr	r4, [r3, #0]
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <Calibrate+0x330>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe ffc7 	bl	80007e4 <__aeabi_ui2f>
 8001856:	4605      	mov	r5, r0
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <Calibrate+0x330>)
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe ffc1 	bl	80007e4 <__aeabi_ui2f>
 8001862:	4603      	mov	r3, r0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	462b      	mov	r3, r5
 8001868:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <Calibrate+0x334>)
 800186a:	491b      	ldr	r1, [pc, #108]	; (80018d8 <Calibrate+0x338>)
 800186c:	4620      	mov	r0, r4
 800186e:	f000 f93f 	bl	8001af0 <map>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	200c      	movs	r0, #12
 8001878:	f7ff f9f2 	bl	8000c60 <SpiWriteReg>
SpiWriteReg(CC1101_TEST0,0x09);
 800187c:	2109      	movs	r1, #9
 800187e:	202e      	movs	r0, #46	; 0x2e
 8001880:	f7ff f9ee 	bl	8000c60 <SpiWriteReg>
int s = SpiReadStatus(CC1101_FSCAL2);
 8001884:	2024      	movs	r0, #36	; 0x24
 8001886:	f7ff fab7 	bl	8000df8 <SpiReadStatus>
 800188a:	4603      	mov	r3, r0
 800188c:	603b      	str	r3, [r7, #0]
if (s<32){SpiWriteReg(CC1101_FSCAL2, s+32);}
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b1f      	cmp	r3, #31
 8001892:	dc07      	bgt.n	80018a4 <Calibrate+0x304>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3320      	adds	r3, #32
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4619      	mov	r1, r3
 800189e:	2024      	movs	r0, #36	; 0x24
 80018a0:	f7ff f9de 	bl	8000c60 <SpiWriteReg>
if (last_pa != 4){setPA(pa);}
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <Calibrate+0x33c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d00a      	beq.n	80018c2 <Calibrate+0x322>
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <Calibrate+0x340>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fb95 	bl	8000fe0 <setPA>
}
 80018b6:	e004      	b.n	80018c2 <Calibrate+0x322>
if (MHz < 322.88){SpiWriteReg(CC1101_TEST0,0x0B);}
 80018b8:	bf00      	nop
 80018ba:	e002      	b.n	80018c2 <Calibrate+0x322>
if (MHz < 430.5){SpiWriteReg(CC1101_TEST0,0x0B);}
 80018bc:	bf00      	nop
 80018be:	e000      	b.n	80018c2 <Calibrate+0x322>
if (MHz < 861){SpiWriteReg(CC1101_TEST0,0x0B);}
 80018c0:	bf00      	nop
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000018 	.word	0x20000018
 80018d4:	44680000 	.word	0x44680000
 80018d8:	44610000 	.word	0x44610000
 80018dc:	20000076 	.word	0x20000076
 80018e0:	20000004 	.word	0x20000004

080018e4 <setSyncMode>:
*FUNCTION NAME:Set SYNC_MODE
*FUNCTION     :Combined sync-word qualifier mode
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void setSyncMode(uint8_t v){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
Split_MDMCFG2();
 80018ee:	f000 f829 	bl	8001944 <Split_MDMCFG2>
m2SYNCM = 0;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <setSyncMode+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
if (v>7){v=7;}
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b07      	cmp	r3, #7
 80018fc:	d901      	bls.n	8001902 <setSyncMode+0x1e>
 80018fe:	2307      	movs	r3, #7
 8001900:	71fb      	strb	r3, [r7, #7]
m2SYNCM=v;
 8001902:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <setSyncMode+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	7013      	strb	r3, [r2, #0]
SpiWriteReg(CC1101_MDMCFG2, m2DCOFF+m2MODFM+m2MANCH+m2SYNCM);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <setSyncMode+0x54>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <setSyncMode+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4413      	add	r3, r2
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <setSyncMode+0x5c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4413      	add	r3, r2
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <setSyncMode+0x50>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4619      	mov	r1, r3
 8001926:	2012      	movs	r0, #18
 8001928:	f7ff f99a 	bl	8000c60 <SpiWriteReg>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000007c 	.word	0x2000007c
 8001938:	20000079 	.word	0x20000079
 800193c:	2000007a 	.word	0x2000007a
 8001940:	2000007b 	.word	0x2000007b

08001944 <Split_MDMCFG2>:
*FUNCTION NAME:Split MDMCFG2
*FUNCTION     :none
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void Split_MDMCFG2(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
int calc = SpiReadStatus(18);
 800194a:	2012      	movs	r0, #18
 800194c:	f7ff fa54 	bl	8000df8 <SpiReadStatus>
 8001950:	4603      	mov	r3, r0
 8001952:	607b      	str	r3, [r7, #4]
m2DCOFF = 0;
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <Split_MDMCFG2+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
m2MODFM = 0;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <Split_MDMCFG2+0x9c>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
m2MANCH = 0;
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <Split_MDMCFG2+0xa0>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
m2SYNCM = 0;
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <Split_MDMCFG2+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
for (uint8_t i = 0; i==0;){
 800196c:	2300      	movs	r3, #0
 800196e:	70fb      	strb	r3, [r7, #3]
 8001970:	e02c      	b.n	80019cc <Split_MDMCFG2+0x88>
if (calc >= 128){calc-=128; m2DCOFF+=128;}
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b7f      	cmp	r3, #127	; 0x7f
 8001976:	dd09      	ble.n	800198c <Split_MDMCFG2+0x48>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b80      	subs	r3, #128	; 0x80
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <Split_MDMCFG2+0x98>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	3b80      	subs	r3, #128	; 0x80
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <Split_MDMCFG2+0x98>)
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e01f      	b.n	80019cc <Split_MDMCFG2+0x88>
else if (calc >= 16){calc-=16; m2MODFM+=16;}
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b0f      	cmp	r3, #15
 8001990:	dd09      	ble.n	80019a6 <Split_MDMCFG2+0x62>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3b10      	subs	r3, #16
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <Split_MDMCFG2+0x9c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3310      	adds	r3, #16
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <Split_MDMCFG2+0x9c>)
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e012      	b.n	80019cc <Split_MDMCFG2+0x88>
else if (calc >= 8){calc-=8; m2MANCH+=8;}
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b07      	cmp	r3, #7
 80019aa:	dd09      	ble.n	80019c0 <Split_MDMCFG2+0x7c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b08      	subs	r3, #8
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <Split_MDMCFG2+0xa0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3308      	adds	r3, #8
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <Split_MDMCFG2+0xa0>)
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e005      	b.n	80019cc <Split_MDMCFG2+0x88>
else{m2SYNCM = calc; i=1;}
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <Split_MDMCFG2+0xa4>)
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	2301      	movs	r3, #1
 80019ca:	70fb      	strb	r3, [r7, #3]
for (uint8_t i = 0; i==0;){
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0cf      	beq.n	8001972 <Split_MDMCFG2+0x2e>
}
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000079 	.word	0x20000079
 80019e0:	2000007a 	.word	0x2000007a
 80019e4:	2000007b 	.word	0x2000007b
 80019e8:	2000007c 	.word	0x2000007c

080019ec <RegConfigSettings>:
*FUNCTION     :CC1101 register config //details refer datasheet of CC1101/CC1100//
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void RegConfigSettings(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
    SpiWriteReg(CC1101_FSCTRL1,  0x06);
 80019f0:	2106      	movs	r1, #6
 80019f2:	200b      	movs	r0, #11
 80019f4:	f7ff f934 	bl	8000c60 <SpiWriteReg>

    setCCMode(ccmode);
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <RegConfigSettings+0xd8>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fa31 	bl	8000e64 <setCCMode>
    setMHZ(MHz);
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <RegConfigSettings+0xdc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fd52 	bl	80014b0 <setMHZ>

    SpiWriteReg(CC1101_MDMCFG1,  0x02);
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	2013      	movs	r0, #19
 8001a10:	f7ff f926 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_MDMCFG0,  0xF8);
 8001a14:	21f8      	movs	r1, #248	; 0xf8
 8001a16:	2014      	movs	r0, #20
 8001a18:	f7ff f922 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_CHANNR,   chan);
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <RegConfigSettings+0xe0>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	200a      	movs	r0, #10
 8001a24:	f7ff f91c 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_DEVIATN,  0x47);
 8001a28:	2147      	movs	r1, #71	; 0x47
 8001a2a:	2015      	movs	r0, #21
 8001a2c:	f7ff f918 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_FREND1,   0x56);
 8001a30:	2156      	movs	r1, #86	; 0x56
 8001a32:	2021      	movs	r0, #33	; 0x21
 8001a34:	f7ff f914 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_MCSM0 ,   0x18);
 8001a38:	2118      	movs	r1, #24
 8001a3a:	2018      	movs	r0, #24
 8001a3c:	f7ff f910 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_FOCCFG,   0x16);
 8001a40:	2116      	movs	r1, #22
 8001a42:	2019      	movs	r0, #25
 8001a44:	f7ff f90c 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_BSCFG,    0x1C);
 8001a48:	211c      	movs	r1, #28
 8001a4a:	201a      	movs	r0, #26
 8001a4c:	f7ff f908 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL2, 0xC7);
 8001a50:	21c7      	movs	r1, #199	; 0xc7
 8001a52:	201b      	movs	r0, #27
 8001a54:	f7ff f904 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL1, 0x00);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f7ff f900 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_AGCCTRL0, 0xB2);
 8001a60:	21b2      	movs	r1, #178	; 0xb2
 8001a62:	201d      	movs	r0, #29
 8001a64:	f7ff f8fc 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL3,   0xE9);
 8001a68:	21e9      	movs	r1, #233	; 0xe9
 8001a6a:	2023      	movs	r0, #35	; 0x23
 8001a6c:	f7ff f8f8 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL2,   0x2A);
 8001a70:	212a      	movs	r1, #42	; 0x2a
 8001a72:	2024      	movs	r0, #36	; 0x24
 8001a74:	f7ff f8f4 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL1,   0x00);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2025      	movs	r0, #37	; 0x25
 8001a7c:	f7ff f8f0 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_FSCAL0,   0x1F);
 8001a80:	211f      	movs	r1, #31
 8001a82:	2026      	movs	r0, #38	; 0x26
 8001a84:	f7ff f8ec 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_FSTEST,   0x59);
 8001a88:	2159      	movs	r1, #89	; 0x59
 8001a8a:	2029      	movs	r0, #41	; 0x29
 8001a8c:	f7ff f8e8 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST2,    0x81);
 8001a90:	2181      	movs	r1, #129	; 0x81
 8001a92:	202c      	movs	r0, #44	; 0x2c
 8001a94:	f7ff f8e4 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST1,    0x35);
 8001a98:	2135      	movs	r1, #53	; 0x35
 8001a9a:	202d      	movs	r0, #45	; 0x2d
 8001a9c:	f7ff f8e0 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_TEST0,    0x09);
 8001aa0:	2109      	movs	r1, #9
 8001aa2:	202e      	movs	r0, #46	; 0x2e
 8001aa4:	f7ff f8dc 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTCTRL1, 0x04);
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	2007      	movs	r0, #7
 8001aac:	f7ff f8d8 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_ADDR,     0x00);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2009      	movs	r0, #9
 8001ab4:	f7ff f8d4 	bl	8000c60 <SpiWriteReg>
    SpiWriteReg(CC1101_PKTLEN,   0x00);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2006      	movs	r0, #6
 8001abc:	f7ff f8d0 	bl	8000c60 <SpiWriteReg>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000077 	.word	0x20000077
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000075 	.word	0x20000075

08001ad0 <SetTx>:
*FUNCTION     :set CC1101 send data
*INPUT        :none
*OUTPUT       :none
****************************************************************/
void SetTx(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  SpiStrobe(CC1101_SIDLE);
 8001ad4:	2036      	movs	r0, #54	; 0x36
 8001ad6:	f7ff f921 	bl	8000d1c <SpiStrobe>
  SpiStrobe(CC1101_STX);        //start send
 8001ada:	2035      	movs	r0, #53	; 0x35
 8001adc:	f7ff f91e 	bl	8000d1c <SpiStrobe>
  trxstate=1;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <SetTx+0x1c>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000007d 	.word	0x2000007d

08001af0 <map>:
  SpiStrobe(0x39);//Enter power down mode when CSn goes high.
}



uint8_t map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  // Make sure the value is within the fromLow-fromHigh range
  value = (value < fromLow) ? fromLow : value;
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7ff f865 	bl	8000bd0 <__aeabi_fcmplt>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <map+0x20>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	e000      	b.n	8001b12 <map+0x22>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	60fb      	str	r3, [r7, #12]
  value = (value > fromHigh) ? fromHigh : value;
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff f878 	bl	8000c0c <__aeabi_fcmpgt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <map+0x36>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	e000      	b.n	8001b28 <map+0x38>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	60fb      	str	r3, [r7, #12]

  // Map the value to the toLow-toHigh range
  uint8_t mapped = (uint8_t) ((value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow);
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7fe fda7 	bl	8000680 <__aeabi_fsub>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461c      	mov	r4, r3
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b3a:	f7fe fda1 	bl	8000680 <__aeabi_fsub>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4619      	mov	r1, r3
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7fe fea6 	bl	8000894 <__aeabi_fmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461c      	mov	r4, r3
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fd96 	bl	8000680 <__aeabi_fsub>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7fe ff4f 	bl	80009fc <__aeabi_fdiv>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd8e 	bl	8000684 <__addsf3>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f858 	bl	8000c20 <__aeabi_f2uiz>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]

  return mapped;
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
	...

08001b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b84:	f000 f9d4 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b88:	f000 f832 	bl	8001bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8c:	f000 f8a8 	bl	8001ce0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b90:	f000 f870 	bl	8001c74 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  Init();              // must be set to initialize the cc1101!
 8001b94:	f7ff f91a 	bl	8000dcc <Init>
      //CC1101LPL.setCCMode(0);       // set config for internal transmission mode. (1)
  setModulation(2);  // set modulation mode. 0 = 2-FSK, 1 = GFSK, 2 = ASK/OOK, 3 = 4-FSK, 4 = MSK.
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7ff f9af 	bl	8000efc <setModulation>
  setMHZ(433.92);   // Here you can set your basic frequency. The lib calculates the frequency automatically (default = 433.92).The cc1101 can: 300-348 MHZ, 387-464MHZ and 779-928MHZ. Read More info from datasheet.
 8001b9e:	4811      	ldr	r0, [pc, #68]	; (8001be4 <main+0x64>)
 8001ba0:	f7ff fc86 	bl	80014b0 <setMHZ>
  setSyncMode(0);  // Combined sync-word qualifier mode. 0 = No preamble/sync. 1 = 16 sync word bits detected. 2 = 16/16 sync word bits detected. 3 = 30/32 sync word bits detected. 4 = No preamble/sync, carrier-sense above threshold. 5 = 15/16 + carrier-sense above threshold. 6 = 16/16 + carrier-sense above threshold. 7 = 30/32 + carrier-sense above threshold.
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff fe9d 	bl	80018e4 <setSyncMode>
   // cclpl.setPA(10);      // set TxPower. The following settings are possible depending on the frequency band.  (-30  -20  -15  -10  -6    0    5    7    10   11   12) Default is max!
      //cclpl.setCrc(1);     // 1 = CRC calculation in TX and CRC check in RX enabled. 0 = CRC disabled for TX and RX.

  SetTx();
 8001baa:	f7ff ff91 	bl	8001ad0 <SetTx>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin (GPIOA, GDO0_Pin, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <main+0x68>)
 8001bb4:	f000 fcaa 	bl	800250c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, 1);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <main+0x6c>)
 8001bbe:	f000 fca5 	bl	800250c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001bc2:	2064      	movs	r0, #100	; 0x64
 8001bc4:	f000 fa16 	bl	8001ff4 <HAL_Delay>
	  HAL_GPIO_WritePin (GPIOA, GDO0_Pin, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2108      	movs	r1, #8
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <main+0x68>)
 8001bce:	f000 fc9d 	bl	800250c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <main+0x6c>)
 8001bd8:	f000 fc98 	bl	800250c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001bdc:	2064      	movs	r0, #100	; 0x64
 8001bde:	f000 fa09 	bl	8001ff4 <HAL_Delay>
	  HAL_GPIO_WritePin (GPIOA, GDO0_Pin, 1);
 8001be2:	e7e4      	b.n	8001bae <main+0x2e>
 8001be4:	43d8f5c3 	.word	0x43d8f5c3
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b090      	sub	sp, #64	; 0x40
 8001bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0318 	add.w	r3, r7, #24
 8001bfa:	2228      	movs	r2, #40	; 0x28
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fe14 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c16:	2301      	movs	r3, #1
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001c26:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fc83 	bl	800253c <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001c3c:	f000 f8a2 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c40:	230f      	movs	r3, #15
 8001c42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c44:	2302      	movs	r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fef0 	bl	8002a40 <HAL_RCC_ClockConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001c66:	f000 f88d 	bl	8001d84 <Error_Handler>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3740      	adds	r7, #64	; 0x40
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <MX_SPI1_Init+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001ca8:	2238      	movs	r2, #56	; 0x38
 8001caa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cc0:	220a      	movs	r2, #10
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_SPI1_Init+0x64>)
 8001cc6:	f001 f821 	bl	8002d0c <HAL_SPI_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd0:	f000 f858 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000080 	.word	0x20000080
 8001cdc:	40013000 	.word	0x40013000

08001ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <MX_GPIO_Init+0x98>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <MX_GPIO_Init+0x98>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_GPIO_Init+0x98>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_GPIO_Init+0x98>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <MX_GPIO_Init+0x98>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <MX_GPIO_Init+0x98>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GDO0_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2118      	movs	r1, #24
 8001d28:	4814      	ldr	r0, [pc, #80]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d2a:	f000 fbef 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	4813      	ldr	r0, [pc, #76]	; (8001d80 <MX_GPIO_Init+0xa0>)
 8001d34:	f000 fbea 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GDO0_Pin NSS_Pin */
  GPIO_InitStruct.Pin = GDO0_Pin|NSS_Pin;
 8001d38:	2318      	movs	r3, #24
 8001d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2302      	movs	r3, #2
 8001d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480b      	ldr	r0, [pc, #44]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d50:	f000 fa58 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2302      	movs	r3, #2
 8001d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_GPIO_Init+0xa0>)
 8001d6c:	f000 fa4a 	bl	8002204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010800 	.word	0x40010800
 8001d80:	40010c00 	.word	0x40010c00

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>
	...

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_MspInit+0x5c>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_MspInit+0x5c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_MspInit+0x5c>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_MspInit+0x5c>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_MspInit+0x5c>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_MspInit+0x5c>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_MspInit+0x60>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_MspInit+0x60>)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000

08001df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_SPI_MspInit+0x88>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d12f      	bne.n	8001e74 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_SPI_MspInit+0x8c>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_SPI_MspInit+0x8c>)
 8001e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_SPI_MspInit+0x8c>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_SPI_MspInit+0x8c>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <HAL_SPI_MspInit+0x8c>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_SPI_MspInit+0x8c>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e44:	23a0      	movs	r3, #160	; 0xa0
 8001e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	4619      	mov	r1, r3
 8001e56:	480b      	ldr	r0, [pc, #44]	; (8001e84 <HAL_SPI_MspInit+0x90>)
 8001e58:	f000 f9d4 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_SPI_MspInit+0x90>)
 8001e70:	f000 f9c8 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40013000 	.word	0x40013000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010800 	.word	0x40010800

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <NMI_Handler+0x4>

08001e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ece:	f000 f875 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
	...

08001ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	; (8001f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	; (8001f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f0a:	f7ff ffe4 	bl	8001ed6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f001 fc69 	bl	80037e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f12:	f7ff fe35 	bl	8001b80 <main>
  bx lr
 8001f16:	4770      	bx	lr
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001f20:	0800387c 	.word	0x0800387c
  ldr r2, =_sbss
 8001f24:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001f28:	200000dc 	.word	0x200000dc

08001f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_2_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_Init+0x28>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_Init+0x28>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f92b 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	200f      	movs	r0, #15
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff ff20 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f935 	bl	80021ea <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f98:	f000 f90b 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000004c 	.word	0x2000004c
 8001fb4:	20000054 	.word	0x20000054
 8001fb8:	20000050 	.word	0x20000050

08001fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_IncTick+0x1c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x20>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000054 	.word	0x20000054
 8001fdc:	200000d8 	.word	0x200000d8

08001fe0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_GetTick+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	200000d8 	.word	0x200000d8

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffe0 	bl	8001fe0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000054 	.word	0x20000054

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800217c:	f7ff ff90 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff49 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff5e 	bl	8002084 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff90 	bl	80020f4 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5f 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffb0 	bl	8002158 <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b08b      	sub	sp, #44	; 0x2c
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002216:	e169      	b.n	80024ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002218:	2201      	movs	r2, #1
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8158 	bne.w	80024e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a9a      	ldr	r2, [pc, #616]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d05e      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002240:	4a98      	ldr	r2, [pc, #608]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d875      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002246:	4a98      	ldr	r2, [pc, #608]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d058      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 800224c:	4a96      	ldr	r2, [pc, #600]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d86f      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002252:	4a96      	ldr	r2, [pc, #600]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d052      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002258:	4a94      	ldr	r2, [pc, #592]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d869      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800225e:	4a94      	ldr	r2, [pc, #592]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d04c      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002264:	4a92      	ldr	r2, [pc, #584]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d863      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800226a:	4a92      	ldr	r2, [pc, #584]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d046      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
 8002270:	4a90      	ldr	r2, [pc, #576]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d85d      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 8002276:	2b12      	cmp	r3, #18
 8002278:	d82a      	bhi.n	80022d0 <HAL_GPIO_Init+0xcc>
 800227a:	2b12      	cmp	r3, #18
 800227c:	d859      	bhi.n	8002332 <HAL_GPIO_Init+0x12e>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_GPIO_Init+0x80>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	080022ff 	.word	0x080022ff
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080022eb 	.word	0x080022eb
 8002290:	0800232d 	.word	0x0800232d
 8002294:	08002333 	.word	0x08002333
 8002298:	08002333 	.word	0x08002333
 800229c:	08002333 	.word	0x08002333
 80022a0:	08002333 	.word	0x08002333
 80022a4:	08002333 	.word	0x08002333
 80022a8:	08002333 	.word	0x08002333
 80022ac:	08002333 	.word	0x08002333
 80022b0:	08002333 	.word	0x08002333
 80022b4:	08002333 	.word	0x08002333
 80022b8:	08002333 	.word	0x08002333
 80022bc:	08002333 	.word	0x08002333
 80022c0:	08002333 	.word	0x08002333
 80022c4:	08002333 	.word	0x08002333
 80022c8:	080022e1 	.word	0x080022e1
 80022cc:	080022f5 	.word	0x080022f5
 80022d0:	4a79      	ldr	r2, [pc, #484]	; (80024b8 <HAL_GPIO_Init+0x2b4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022d6:	e02c      	b.n	8002332 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e029      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	3304      	adds	r3, #4
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e024      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	3308      	adds	r3, #8
 80022f0:	623b      	str	r3, [r7, #32]
          break;
 80022f2:	e01f      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	330c      	adds	r3, #12
 80022fa:	623b      	str	r3, [r7, #32]
          break;
 80022fc:	e01a      	b.n	8002334 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002306:	2304      	movs	r3, #4
 8002308:	623b      	str	r3, [r7, #32]
          break;
 800230a:	e013      	b.n	8002334 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	611a      	str	r2, [r3, #16]
          break;
 800231e:	e009      	b.n	8002334 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002320:	2308      	movs	r3, #8
 8002322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	615a      	str	r2, [r3, #20]
          break;
 800232a:	e003      	b.n	8002334 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x130>
          break;
 8002332:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2bff      	cmp	r3, #255	; 0xff
 8002338:	d801      	bhi.n	800233e <HAL_GPIO_Init+0x13a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	e001      	b.n	8002342 <HAL_GPIO_Init+0x13e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2bff      	cmp	r3, #255	; 0xff
 8002348:	d802      	bhi.n	8002350 <HAL_GPIO_Init+0x14c>
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x152>
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	3b08      	subs	r3, #8
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	210f      	movs	r1, #15
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	6a39      	ldr	r1, [r7, #32]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	431a      	orrs	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80b1 	beq.w	80024e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800239c:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <HAL_GPIO_Init+0x2bc>)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a40      	ldr	r2, [pc, #256]	; (80024c4 <HAL_GPIO_Init+0x2c0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <HAL_GPIO_Init+0x1ec>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <HAL_GPIO_Init+0x2c4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00d      	beq.n	80023ec <HAL_GPIO_Init+0x1e8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3e      	ldr	r2, [pc, #248]	; (80024cc <HAL_GPIO_Init+0x2c8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <HAL_GPIO_Init+0x1e4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3d      	ldr	r2, [pc, #244]	; (80024d0 <HAL_GPIO_Init+0x2cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_GPIO_Init+0x1e0>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e004      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023f0:	2300      	movs	r3, #0
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002402:	492f      	ldr	r1, [pc, #188]	; (80024c0 <HAL_GPIO_Init+0x2bc>)
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	492c      	ldr	r1, [pc, #176]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	4928      	ldr	r1, [pc, #160]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002434:	4013      	ands	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4922      	ldr	r1, [pc, #136]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	491e      	ldr	r1, [pc, #120]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800245c:	4013      	ands	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4918      	ldr	r1, [pc, #96]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	43db      	mvns	r3, r3
 8002482:	4914      	ldr	r1, [pc, #80]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002484:	4013      	ands	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d021      	beq.n	80024d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_GPIO_Init+0x2d0>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	60cb      	str	r3, [r1, #12]
 80024a0:	e021      	b.n	80024e6 <HAL_GPIO_Init+0x2e2>
 80024a2:	bf00      	nop
 80024a4:	10320000 	.word	0x10320000
 80024a8:	10310000 	.word	0x10310000
 80024ac:	10220000 	.word	0x10220000
 80024b0:	10210000 	.word	0x10210000
 80024b4:	10120000 	.word	0x10120000
 80024b8:	10110000 	.word	0x10110000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40010800 	.word	0x40010800
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_GPIO_Init+0x304>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	43db      	mvns	r3, r3
 80024e0:	4909      	ldr	r1, [pc, #36]	; (8002508 <HAL_GPIO_Init+0x304>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f47f ae8e 	bne.w	8002218 <HAL_GPIO_Init+0x14>
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	372c      	adds	r7, #44	; 0x2c
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e272      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8087 	beq.w	800266a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800255c:	4b92      	ldr	r3, [pc, #584]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b04      	cmp	r3, #4
 8002566:	d00c      	beq.n	8002582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002568:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d112      	bne.n	800259a <HAL_RCC_OscConfig+0x5e>
 8002574:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d10b      	bne.n	800259a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	4b89      	ldr	r3, [pc, #548]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d06c      	beq.n	8002668 <HAL_RCC_OscConfig+0x12c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d168      	bne.n	8002668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e24c      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x76>
 80025a4:	4b80      	ldr	r3, [pc, #512]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a7f      	ldr	r2, [pc, #508]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e02e      	b.n	8002610 <HAL_RCC_OscConfig+0xd4>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x98>
 80025ba:	4b7b      	ldr	r3, [pc, #492]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a7a      	ldr	r2, [pc, #488]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b78      	ldr	r3, [pc, #480]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a77      	ldr	r2, [pc, #476]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e01d      	b.n	8002610 <HAL_RCC_OscConfig+0xd4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0xbc>
 80025de:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a71      	ldr	r2, [pc, #452]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0xd4>
 80025f8:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6a      	ldr	r2, [pc, #424]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a67      	ldr	r2, [pc, #412]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fce2 	bl	8001fe0 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7ff fcde 	bl	8001fe0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e200      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0xe4>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fcce 	bl	8001fe0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff fcca 	bl	8001fe0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1ec      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x10c>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002676:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d11c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x18c>
 800268e:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d116      	bne.n	80026c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	4b43      	ldr	r3, [pc, #268]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x176>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1c0      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4939      	ldr	r1, [pc, #228]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	e03a      	b.n	800273e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff fc83 	bl	8001fe0 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026de:	f7ff fc7f 	bl	8001fe0 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e1a1      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4927      	ldr	r1, [pc, #156]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fc62 	bl	8001fe0 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002720:	f7ff fc5e 	bl	8001fe0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e180      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03a      	beq.n	80027c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d019      	beq.n	8002786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_RCC_OscConfig+0x274>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7ff fc42 	bl	8001fe0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7ff fc3e 	bl	8001fe0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e160      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f000 faa6 	bl	8002cd0 <RCC_Delay>
 8002784:	e01c      	b.n	80027c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_RCC_OscConfig+0x274>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278c:	f7ff fc28 	bl	8001fe0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002792:	e00f      	b.n	80027b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002794:	f7ff fc24 	bl	8001fe0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d908      	bls.n	80027b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e146      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	42420000 	.word	0x42420000
 80027b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e9      	bne.n	8002794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a6 	beq.w	800291a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10d      	bne.n	80027fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a87      	ldr	r2, [pc, #540]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
 80027ea:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <HAL_RCC_OscConfig+0x4c8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002806:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x4c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7e      	ldr	r2, [pc, #504]	; (8002a04 <HAL_RCC_OscConfig+0x4c8>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7ff fbe5 	bl	8001fe0 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7ff fbe1 	bl	8001fe0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b64      	cmp	r3, #100	; 0x64
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e103      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <HAL_RCC_OscConfig+0x4c8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x312>
 8002840:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a6e      	ldr	r2, [pc, #440]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	e02d      	b.n	80028aa <HAL_RCC_OscConfig+0x36e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x334>
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a69      	ldr	r2, [pc, #420]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6213      	str	r3, [r2, #32]
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a66      	ldr	r2, [pc, #408]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f023 0304 	bic.w	r3, r3, #4
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	e01c      	b.n	80028aa <HAL_RCC_OscConfig+0x36e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_OscConfig+0x356>
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4a60      	ldr	r2, [pc, #384]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	6213      	str	r3, [r2, #32]
 8002884:	4b5e      	ldr	r3, [pc, #376]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a5d      	ldr	r2, [pc, #372]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	e00b      	b.n	80028aa <HAL_RCC_OscConfig+0x36e>
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4a5a      	ldr	r2, [pc, #360]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6213      	str	r3, [r2, #32]
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d015      	beq.n	80028de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7ff fb95 	bl	8001fe0 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7ff fb91 	bl	8001fe0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0b1      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ee      	beq.n	80028ba <HAL_RCC_OscConfig+0x37e>
 80028dc:	e014      	b.n	8002908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7ff fb7f 	bl	8001fe0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7ff fb7b 	bl	8001fe0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e09b      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fc:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ee      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4a3b      	ldr	r2, [pc, #236]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8087 	beq.w	8002a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002924:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d061      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d146      	bne.n	80029c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002938:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <HAL_RCC_OscConfig+0x4cc>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7ff fb4f 	bl	8001fe0 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7ff fb4b 	bl	8001fe0 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e06d      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002958:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d108      	bne.n	8002980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4921      	ldr	r1, [pc, #132]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a19      	ldr	r1, [r3, #32]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	430b      	orrs	r3, r1
 8002992:	491b      	ldr	r1, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff fb1f 	bl	8001fe0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7ff fb1b 	bl	8001fe0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e03d      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x46a>
 80029c4:	e035      	b.n	8002a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_OscConfig+0x4cc>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff fb08 	bl	8001fe0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d4:	f7ff fb04 	bl	8001fe0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e026      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x498>
 80029f2:	e01e      	b.n	8002a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e019      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_OscConfig+0x500>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000

08002a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0d0      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b6a      	ldr	r3, [pc, #424]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d910      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 0207 	bic.w	r2, r3, #7
 8002a6a:	4965      	ldr	r1, [pc, #404]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b8      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d040      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d115      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e073      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06b      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1e:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4936      	ldr	r1, [pc, #216]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b30:	f7ff fa56 	bl	8001fe0 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7ff fa52 	bl	8001fe0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e053      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 020c 	and.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1eb      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d210      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	4922      	ldr	r1, [pc, #136]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e032      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4916      	ldr	r1, [pc, #88]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bce:	f000 f821 	bl	8002c14 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490a      	ldr	r1, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1cc>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1d0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f9b4 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08003864 	.word	0x08003864
 8002c0c:	2000004c 	.word	0x2000004c
 8002c10:	20000050 	.word	0x20000050

08002c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c14:	b490      	push	{r4, r7}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c1a:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c1c:	1d3c      	adds	r4, r7, #4
 8002c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c24:	f240 2301 	movw	r3, #513	; 0x201
 8002c28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d002      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x40>
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x46>
 8002c52:	e02b      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c54:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c56:	623b      	str	r3, [r7, #32]
      break;
 8002c58:	e02b      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	3328      	adds	r3, #40	; 0x28
 8002c64:	443b      	add	r3, r7
 8002c66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d012      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	0c5b      	lsrs	r3, r3, #17
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	3328      	adds	r3, #40	; 0x28
 8002c82:	443b      	add	r3, r7
 8002c84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	e004      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	623b      	str	r3, [r7, #32]
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cae:	623b      	str	r3, [r7, #32]
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc90      	pop	{r4, r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	08003854 	.word	0x08003854
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	007a1200 	.word	0x007a1200
 8002ccc:	003d0900 	.word	0x003d0900

08002cd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <RCC_Delay+0x34>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <RCC_Delay+0x38>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0a5b      	lsrs	r3, r3, #9
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cec:	bf00      	nop
  }
  while (Delay --);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	60fa      	str	r2, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f9      	bne.n	8002cec <RCC_Delay+0x1c>
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	2000004c 	.word	0x2000004c
 8002d08:	10624dd3 	.word	0x10624dd3

08002d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e076      	b.n	8002e0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2e:	d009      	beq.n	8002d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
 8002d36:	e005      	b.n	8002d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff f848 	bl	8001df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	ea42 0103 	orr.w	r1, r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	0c1a      	lsrs	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f002 0204 	and.w	r2, r2, #4
 8002dea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_SPI_Transmit+0x22>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e126      	b.n	8003084 <HAL_SPI_Transmit+0x270>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e3e:	f7ff f8cf 	bl	8001fe0 <HAL_GetTick>
 8002e42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d002      	beq.n	8002e5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e58:	e10b      	b.n	8003072 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Transmit+0x52>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e6a:	e102      	b.n	8003072 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ed2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d007      	beq.n	8002ef2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efa:	d14b      	bne.n	8002f94 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Transmit+0xf6>
 8002f04:	8afb      	ldrh	r3, [r7, #22]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d13e      	bne.n	8002f88 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	1c9a      	adds	r2, r3, #2
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f2e:	e02b      	b.n	8002f88 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d112      	bne.n	8002f64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	1c9a      	adds	r2, r3, #2
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f62:	e011      	b.n	8002f88 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f64:	f7ff f83c 	bl	8001fe0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d803      	bhi.n	8002f7c <HAL_SPI_Transmit+0x168>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7a:	d102      	bne.n	8002f82 <HAL_SPI_Transmit+0x16e>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f86:	e074      	b.n	8003072 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ce      	bne.n	8002f30 <HAL_SPI_Transmit+0x11c>
 8002f92:	e04c      	b.n	800302e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SPI_Transmit+0x18e>
 8002f9c:	8afb      	ldrh	r3, [r7, #22]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d140      	bne.n	8003024 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fc8:	e02c      	b.n	8003024 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d113      	bne.n	8003000 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	7812      	ldrb	r2, [r2, #0]
 8002fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ffe:	e011      	b.n	8003024 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003000:	f7fe ffee 	bl	8001fe0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d803      	bhi.n	8003018 <HAL_SPI_Transmit+0x204>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003016:	d102      	bne.n	800301e <HAL_SPI_Transmit+0x20a>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003022:	e026      	b.n	8003072 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1cd      	bne.n	8002fca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fbb8 	bl	80037a8 <SPI_EndRxTxTransaction>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e000      	b.n	8003072 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003082:	7ffb      	ldrb	r3, [r7, #31]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a8:	d112      	bne.n	80030d0 <HAL_SPI_Receive+0x44>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10e      	bne.n	80030d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2204      	movs	r2, #4
 80030b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8f1 	bl	80032ae <HAL_SPI_TransmitReceive>
 80030cc:	4603      	mov	r3, r0
 80030ce:	e0ea      	b.n	80032a6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_SPI_Receive+0x52>
 80030da:	2302      	movs	r3, #2
 80030dc:	e0e3      	b.n	80032a6 <HAL_SPI_Receive+0x21a>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030e6:	f7fe ff7b 	bl	8001fe0 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030fc:	e0ca      	b.n	8003294 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_SPI_Receive+0x7e>
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800310e:	e0c1      	b.n	8003294 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2204      	movs	r2, #4
 8003114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d10f      	bne.n	8003178 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003166:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d007      	beq.n	8003196 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d162      	bne.n	8003264 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800319e:	e02e      	b.n	80031fe <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d115      	bne.n	80031da <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f103 020c 	add.w	r2, r3, #12
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031d8:	e011      	b.n	80031fe <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031da:	f7fe ff01 	bl	8001fe0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d803      	bhi.n	80031f2 <HAL_SPI_Receive+0x166>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f0:	d102      	bne.n	80031f8 <HAL_SPI_Receive+0x16c>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031fc:	e04a      	b.n	8003294 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1cb      	bne.n	80031a0 <HAL_SPI_Receive+0x114>
 8003208:	e031      	b.n	800326e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d113      	bne.n	8003240 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	b292      	uxth	r2, r2
 8003224:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	1c9a      	adds	r2, r3, #2
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800323e:	e011      	b.n	8003264 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003240:	f7fe fece 	bl	8001fe0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d803      	bhi.n	8003258 <HAL_SPI_Receive+0x1cc>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003256:	d102      	bne.n	800325e <HAL_SPI_Receive+0x1d2>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003262:	e017      	b.n	8003294 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1cd      	bne.n	800320a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa46 	bl	8003704 <SPI_EndRxTransaction>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
 8003290:	e000      	b.n	8003294 <HAL_SPI_Receive+0x208>
  }

error :
 8003292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08c      	sub	sp, #48	; 0x30
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032bc:	2301      	movs	r3, #1
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_SPI_TransmitReceive+0x26>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e18a      	b.n	80035ea <HAL_SPI_TransmitReceive+0x33c>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032dc:	f7fe fe80 	bl	8001fe0 <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d00f      	beq.n	800331e <HAL_SPI_TransmitReceive+0x70>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003304:	d107      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x68>
 800330e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003312:	2b04      	cmp	r3, #4
 8003314:	d003      	beq.n	800331e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003316:	2302      	movs	r3, #2
 8003318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800331c:	e15b      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x82>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x82>
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003336:	e14e      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b04      	cmp	r3, #4
 8003342:	d003      	beq.n	800334c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2205      	movs	r2, #5
 8003348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	887a      	ldrh	r2, [r7, #2]
 8003362:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	887a      	ldrh	r2, [r7, #2]
 800336e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d007      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a8:	d178      	bne.n	800349c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x10a>
 80033b2:	8b7b      	ldrh	r3, [r7, #26]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d166      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033dc:	e053      	b.n	8003486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d11b      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x176>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x176>
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d113      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d119      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x1b8>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d014      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	b292      	uxth	r2, r2
 8003448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	1c9a      	adds	r2, r3, #2
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003462:	2301      	movs	r3, #1
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003466:	f7fe fdbb 	bl	8001fe0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003472:	429a      	cmp	r2, r3
 8003474:	d807      	bhi.n	8003486 <HAL_SPI_TransmitReceive+0x1d8>
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800347c:	d003      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003484:	e0a7      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1a6      	bne.n	80033de <HAL_SPI_TransmitReceive+0x130>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1a1      	bne.n	80033de <HAL_SPI_TransmitReceive+0x130>
 800349a:	e07c      	b.n	8003596 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x1fc>
 80034a4:	8b7b      	ldrh	r3, [r7, #26]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d16b      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d0:	e057      	b.n	8003582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11c      	bne.n	800351a <HAL_SPI_TransmitReceive+0x26c>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <HAL_SPI_TransmitReceive+0x26c>
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d114      	bne.n	800351a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d119      	bne.n	800355c <HAL_SPI_TransmitReceive+0x2ae>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d014      	beq.n	800355c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003558:	2301      	movs	r3, #1
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800355c:	f7fe fd40 	bl	8001fe0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003568:	429a      	cmp	r2, r3
 800356a:	d803      	bhi.n	8003574 <HAL_SPI_TransmitReceive+0x2c6>
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003572:	d102      	bne.n	800357a <HAL_SPI_TransmitReceive+0x2cc>
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003580:	e029      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1a2      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x224>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d19d      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f904 	bl	80037a8 <SPI_EndRxTxTransaction>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035b2:	e010      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	e000      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3730      	adds	r7, #48	; 0x30
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003604:	f7fe fcec 	bl	8001fe0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4413      	add	r3, r2
 8003612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003614:	f7fe fce4 	bl	8001fe0 <HAL_GetTick>
 8003618:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800361a:	4b39      	ldr	r3, [pc, #228]	; (8003700 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	0d1b      	lsrs	r3, r3, #20
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362a:	e054      	b.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003632:	d050      	beq.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003634:	f7fe fcd4 	bl	8001fe0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d13d      	bne.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003662:	d111      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	d004      	beq.n	8003678 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d107      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003690:	d10f      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e017      	b.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d19b      	bne.n	800362c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	2000004c 	.word	0x2000004c

08003704 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003718:	d111      	bne.n	800373e <SPI_EndRxTransaction+0x3a>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d004      	beq.n	800372e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372c:	d107      	bne.n	800373e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d117      	bne.n	8003778 <SPI_EndRxTransaction+0x74>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003750:	d112      	bne.n	8003778 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2200      	movs	r2, #0
 800375a:	2101      	movs	r1, #1
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff ff49 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01a      	beq.n	800379e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e013      	b.n	80037a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	2180      	movs	r1, #128	; 0x80
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff ff36 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e000      	b.n	80037a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2200      	movs	r2, #0
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff ff18 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e000      	b.n	80037dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <__libc_init_array>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	2600      	movs	r6, #0
 80037e8:	4d0c      	ldr	r5, [pc, #48]	; (800381c <__libc_init_array+0x38>)
 80037ea:	4c0d      	ldr	r4, [pc, #52]	; (8003820 <__libc_init_array+0x3c>)
 80037ec:	1b64      	subs	r4, r4, r5
 80037ee:	10a4      	asrs	r4, r4, #2
 80037f0:	42a6      	cmp	r6, r4
 80037f2:	d109      	bne.n	8003808 <__libc_init_array+0x24>
 80037f4:	f000 f822 	bl	800383c <_init>
 80037f8:	2600      	movs	r6, #0
 80037fa:	4d0a      	ldr	r5, [pc, #40]	; (8003824 <__libc_init_array+0x40>)
 80037fc:	4c0a      	ldr	r4, [pc, #40]	; (8003828 <__libc_init_array+0x44>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	42a6      	cmp	r6, r4
 8003804:	d105      	bne.n	8003812 <__libc_init_array+0x2e>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	f855 3b04 	ldr.w	r3, [r5], #4
 800380c:	4798      	blx	r3
 800380e:	3601      	adds	r6, #1
 8003810:	e7ee      	b.n	80037f0 <__libc_init_array+0xc>
 8003812:	f855 3b04 	ldr.w	r3, [r5], #4
 8003816:	4798      	blx	r3
 8003818:	3601      	adds	r6, #1
 800381a:	e7f2      	b.n	8003802 <__libc_init_array+0x1e>
 800381c:	08003874 	.word	0x08003874
 8003820:	08003874 	.word	0x08003874
 8003824:	08003874 	.word	0x08003874
 8003828:	08003878 	.word	0x08003878

0800382c <memset>:
 800382c:	4603      	mov	r3, r0
 800382e:	4402      	add	r2, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <_init>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	bf00      	nop
 8003840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003842:	bc08      	pop	{r3}
 8003844:	469e      	mov	lr, r3
 8003846:	4770      	bx	lr

08003848 <_fini>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr
